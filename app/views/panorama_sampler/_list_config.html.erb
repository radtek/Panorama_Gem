<%
  @update_area = get_unique_area_id

  def render_action_buttons(rec)
    retval =
    "<div style=\"float:left\">#{
    ajax_submit('Edit', {
        :update_area => @update_area,
        :action      => :show_edit_config_form,
        :id          => rec[:id]
    }, :title => 'Add new database config'
    )}</div><div>#{
    ajax_submit('Delete', {
        :update_area => :content_for_layout,
        :action      => :delete_config,
        :id          => rec[:id]
    }, :title => 'Delete configuration record',
        :onclick=>"return confirm('Delete config entry with ID = #{rec[:id]} ?');return false;"
    )}</div>"

    if rec[:last_error_message] || rec[:last_error_time]
      retval << "
    <div>#{
    ajax_submit('Clear error', {
        :update_area => :content_for_layout,
        :action      => :clear_config_error,
        :id          => rec[:id]
    }, :title => 'Delete error message for this config entry'
    )}</div>"
    end
    retval
  end

  def default_style(rec, overwrite=nil)
    return overwrite if overwrite
    "background-color:darkgray;" if !rec[:active]
  end

  def error_style(rec)
    "background-color:coral;" if rec[:last_successful_connect].nil? || (rec[:last_successful_connect] && rec[:last_error_time] && rec[:last_error_time] > rec[:last_successful_connect])
  end

  def snapshot_duration(rec)
    if rec[:last_snapshot_end] && rec[:last_snapshot_start]
      if rec[:last_snapshot_end] > rec[:last_snapshot_start]
        fn(rec[:last_snapshot_end] - rec[:last_snapshot_start], 2)
      else
        'Snapshot not successful finished'
      end
    else
      'Unknown'
    end
  end

  column_options =
  [
    {:caption=>'ID',                    :data=>proc{|rec| rec[:id]},                                        :title=>"Unique identifier for config entry", :align=>:right,           :data_style=>proc{|rec| default_style(rec)}},
    {:caption=>'A.',                    :data=>proc{|rec| rec[:active] ? 'Y' : 'N'},                        :title=>"Active-state, sampling occurs for active configurations only", :data_style=>proc{|rec| default_style(rec)}},
    {:caption=>'Config. name',          :data=>proc{|rec| rec[:name]},                                      :title=>"Name / description for configuration",                         :data_style=>proc{|rec| default_style(rec)}},
    {:caption=>'TNS config',            :data=>proc{|rec| rec[:tns]},                                       :title=>"TNS-alias or connect string",                                  :data_style=>proc{|rec| default_style(rec)}},
    {:caption=>'Username',              :data=>proc{|rec| rec[:user]},                                      :title=>"Name of user to connect to database for workload recording", :data_style=>proc{|rec| default_style(rec)}},
    {:caption=>'Schema owner',          :data=>proc{|rec| rec[:owner]},                                     :title=>"Name of user/schema to store Panoramas tables for workload recording", :data_style=>proc{|rec| default_style(rec)}},
    {:caption=>'DBID',                  :data=>proc{|rec| rec[:dbid]},                                      :title=>"Unique database identifier (v$Database.DBID)",                 :data_style=>proc{|rec| default_style(rec)}},
    {:caption=>"Snapshot cycle",        :data=>proc{|rec| fn(rec[:snapshot_cycle])},                        :title=>"Delay between snapshots in minutes", :align=>:right,           :data_style=>proc{|rec| default_style(rec)}},
    {:caption=>"Snapshot retention",    :data=>proc{|rec| fn(rec[:snapshot_retention])},                    :title=>"Retention time for snapshot data in days before deletion", :align=>:right, :data_style=>proc{|rec| default_style(rec)}},
    {:caption=>"Min. SQL execs.",       :data=>proc{|rec| fn(rec[:sql_min_no_of_execs])},                   :title=>"Minimum number of SQL executions in snapshot cycle to be recorded by Panorama-Sampler", :align=>:right, :data_style=>proc{|rec| default_style(rec)}},
    {:caption=>"Min. SQL runtime",      :data=>proc{|rec| fn(rec[:sql_min_runtime_millisecs])},             :title=>"Minimum number of SQL runtime (milliseconds) in snapshot cycle to be recorded by Panorama-Sampler", :align=>:right, :data_style=>proc{|rec| default_style(rec)}},
    {:caption=>'Last snapshot time',    :data=>proc{|rec| localeDateTime(rec[:last_snapshot_start])},       :title=>"Timestamp of last snapshot start",                             :data_style=>proc{|rec| default_style(rec)}, :data_title=>proc{|rec| "%t\nLast snapshot ended at #{localeDateTime(rec[:last_snapshot_end])}"}},
    {:caption=>'Last snapshot instance',:data=>proc{|rec| rec[:last_snapshot_instance]},                    :title=>"Instance number the last snapshot was executed on",            :data_style=>proc{|rec| default_style(rec)} },
    {:caption=>'Last snapshot duration',:data=>proc{|rec| snapshot_duration(rec)},                          :title=>"Duration in seconds of last snapshot creation",                :align=>:right, :data_style=>proc{|rec| default_style(rec)}},
    {:caption=>'Last connect time',     :data=>proc{|rec| localeDateTime(rec[:last_successful_connect])},   :title=>"Timestamp of last successful connect to this database",        :data_style=>proc{|rec| default_style(rec)}},
    {:caption=>'Last error time',       :data=>proc{|rec| localeDateTime(rec[:last_error_time])},           :title=>"Timestamp of last connect- or execution-error", :data_style=>proc{|rec| default_style(rec, error_style(rec))}},
    {:caption=>'Last error message',    :data=>proc{|rec| rec[:last_error_message]},                        :title=>"Last message of connect- or execution-error", :data_title=>proc{|rec| "%t\n#{rec[:last_error_message]}"}, :data_style=>proc{|rec| default_style(rec, error_style(rec))}, :max_wrap_width=>60},
    {:caption=>'Action',                :data=>proc{|rec| render_action_buttons(rec) },                     :title=>"Execute action for this record" },
  ]

%>

<%= gen_slickgrid(@sampler_config, column_options, {
    :caption => "Panorama-Sampler configuration (stored in local file system at Panorama server)",
    :max_height=>450,
    :command_menu_entries => [   {
                                     :name                  => :refresh_list,
                                     :caption               => 'Refresh list',
                                     :hint                  => "Refresh content of list from config stored at server",
                                     :icon_class            => 'ui-icon ui-icon-arrowrefresh-1-e',
                                     :show_icon_in_caption  => :only,
                                     :action                => "ajax_html('#{params[:update_area]}', 'panorama_sampler', 'list_config', { update_area: '#{params[:update_area]}'});"
                                 }
    ]
}) %>

<%=
  ajax_submit("Add new target database for sampling", {
      :update_area => @update_area,
      :action      => :show_new_config_form,
  }, :title => 'Add new config for target database'
  )
%>

<div id="<%= @update_area %>"></div>