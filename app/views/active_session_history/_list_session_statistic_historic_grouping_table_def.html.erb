<% @update_area = get_unique_area_id %>

<script type="text/javascript">

  function call_ajax_single_rows<%=@update_area%>(min_snap_id, max_snap_id, group_by_value, record_count){
    var json_data = <%= {:groupfilter => @groupfilter}.to_json.html_safe %>
    if (min_snap_id)
      json_data['groupfilter']['Min_Snap_ID'] = min_snap_id;
    if (max_snap_id)
      json_data['groupfilter']['Max_Snap_ID'] = max_snap_id;
    json_data['groupfilter']['<%= @groupby %>'] = group_by_value;
    json_data['record_count'] = record_count;
    json_data['update_area'] = '<%= @update_area %>';

    jQuery.ajax({method: "POST", url: "ActiveSessionHistory/list_session_statistic_historic_single_record", data: json_data});
  }

  function call_ajax_grouping<%=@update_area%>(min_snap_id, max_snap_id, group_by_value, next_group_by_name){
    var json_data = <%= {:groupfilter => @groupfilter}.to_json.html_safe %>

    if (min_snap_id)
      json_data['groupfilter']['Min_Snap_ID'] = min_snap_id;
    if (max_snap_id)
      json_data['groupfilter']['Max_Snap_ID'] = max_snap_id;

    json_data['groupfilter']['<%= @groupby %>'] = group_by_value;
    json_data['groupby'] = next_group_by_name;
    json_data['update_area'] = '<%= @update_area %>';

    jQuery.ajax({method: "POST", url: "ActiveSessionHistory/list_session_statistic_historic_grouping", data: json_data});
  }


</script>


<%

  def get_groupfilter(rec, groupby_column, groupby_value)
    groupfilter = @groupfilter.clone                                            # Sicherstellen ,dass Nachfolger noch relevanten Filter bekommen
    if rec.min_snap_id
      groupfilter["Min_Snap_ID"] = rec.min_snap_id
    else
      groupfilter.delete("Min_Snap_ID")                                        # Den Filter entfernen wenn im aktuellen Result keine Abgrenzung mehr möglich ist
    end
    if rec.max_snap_id
      groupfilter["Max_Snap_ID"] = rec.max_snap_id
    else
      groupfilter.delete("Max_Snap_ID")                                        # Den Filter entfernen wenn im aktuellen Result keine Abgrenzung mehr möglich ist
    end
    groupfilter.merge({ groupby_column => groupby_value})
  end


  # Alternativ-Variante für Aktualisierung des Links in Javascript
  def decorator_single_rows
    # Baue HREF in der Zelle mit Referenz auf Java-Funktion, die den Ajax-Aufruf enthält
    "
      var min_snap_id = dataContext[slickGrid.getColumnByName('min_snap_id').id]
      if (!min_snap_id){
        min_snap_id = 'null';
      }

      var max_snap_id = dataContext[slickGrid.getColumnByName('max_snap_id').id]
      if (!max_snap_id){
        max_snap_id = 'null';
      }

      var groupby_value = dataContext.col0.replace(new RegExp(\"&\", 'g'), \"\\\\&\");

      return '<a href=\"#\" title=\"#{"#{t(:active_session_history_samples_link_hint, :default=>'Show single samples of group')} #{@groupby}"}\" '+
        'onclick=\"call_ajax_single_rows#{@update_area}('+min_snap_id+', '+max_snap_id+', '+String.fromCharCode(39)+groupby_value+String.fromCharCode(39)+', '+slickGrid.parseFloatLocale(cell_value)+' ); return false;\"'+
         '>'+cell_value+'</a>'
    "
  end

  def show_groupkey_value(rec)
    return nil if rec.group_value.nil?
    # Zerlegen der ersten Spalten in Elemente für optionalen Link
    case @groupby
      when "DB-Object"      then if rec.group_value['[Unknown]'].nil?; link_object_description(@update_area, rec.group_value.split(".")[0], rec.group_value.split(".")[1], rec.group_value); else rec.group_value; end
      when "DB-Sub-Object"  then if rec.group_value['[Unknown]'].nil?; link_object_description(@update_area, rec.group_value.split(".")[0], rec.group_value.split(".")[1].split(" ")[0], rec.group_value); else rec.group_value; end
      when "Entry-PL/SQL"   then if rec.group_value['[Unknown]'].nil?
                                   full_obj = rec.group_value.split(" ")[1]
                                   link_object_description(@update_area, full_obj.split(".")[0], full_obj.split(".")[1], rec.group_value);
                                 else
                                   rec.group_value
                                 end
      when 'Machine'        then link_machine_ip_info(rec.group_value)
      when "SQL-ID"         then link_column_sql_id(rec)
    else rec.group_value
    end
  end

  # Aus Gruppenlink direkt SQL-Details aufrufen, wenn eideutige Aussage zu SQL_ID und Username und Instance
  def link_column_sql_id(rec)
     link_historic_sql_id(rec.instance_number, rec.sql_id, @groupfilter[:time_selection_start], @groupfilter[:time_selection_end], @update_area,
                         (rec.username && rec.username.match('<.*>'))  ? nil : rec.username
    )
  end

  # Alternativ-Variante für Aktualisierung des Links in Javascript
  def decorator_grouping(next_groupby)
    # Baue HREF in der Zelle mit Referenz auf Java-Funktion, die den Ajax-Aufruf enthält
    # dataContext.col0: 1. Spalte des Results enthält den group-Value
    "
      var decorated_cell_value = '';

      var cnt_column = slickGrid.all_columns[parseInt(columnDef.index) - 1]
      var cnt_value = dataContext[cnt_column.id];

      if (parseInt(cnt_value) > 1){
        decorated_cell_value = '<&nbsp;'+cnt_value+'&nbsp;>';
      } else {
        decorated_cell_value = cell_value;

        // Einsetzen von optionalen Umbruch-Stellen in Strings
        console.log(columnDef['name']+' '+columnDef['sort_type']);
        if (columnDef['sort_type'] == 'string'){

            decorated_cell_value = decorated_cell_value.replace('.', '.<wbr>');                       // Optionaler Wort-Umbruch
            console.log(decorated_cell_value);
        }
      }

      var min_snap_id = dataContext[slickGrid.getColumnByName('min_snap_id').id]
      if (!min_snap_id){
        min_snap_id = 'null';
      }

      var max_snap_id = dataContext[slickGrid.getColumnByName('max_snap_id').id]
      if (!max_snap_id){
        max_snap_id = 'null';
      }

      var groupby_value = dataContext.col0.replace(new RegExp(\"&\", 'g'), \"\\\\&\");

      return '<a href=\"#\" title=\"#{"#{t(:active_session_history_list_session_statistic_historic_grouping_link_hint, :default=>"Show different")} #{next_groupby}s #{t(:of, :default=>"of")} #{@groupby}s"}\" '+
        'onclick=\"call_ajax_grouping#{@update_area}('+min_snap_id+', '+max_snap_id+', '+String.fromCharCode(39)+groupby_value+String.fromCharCode(39)+', '+String.fromCharCode(39)+'#{next_groupby}'+String.fromCharCode(39)+'); return false;\"'+
         '>'+decorated_cell_value+'</a>'
    "
  end


  def link_temp_and_pga_usage(rec, value)
    my_ajax_post_link(value,     # Verhindern Zeilenumbruch in Anzeige
                    {:action  => :list_temp_usage_historic,
                     :groupfilter  => get_groupfilter(rec, @groupby, rec.group_value),
                     :time_groupby => :day,
                     :update_area  => @update_area,
                            },
                    :title=>"Show total TEMP and PGA usage for current filters"
    )
  end

  def show_info(value)
    if value.class == DateTime || value.class == Time
      localeDateTime value
    else
      my_html_escape value
    end
  end

  # Berechnung average load aus rec
  def avg_load(rec)
    rec.time_waited_secs.to_f/(rec.sample_dauer_secs>0 ? rec.sample_dauer_secs : rec.max_sample_cycle)
  end

  @column_options = []
  @column_options << {:caption=>session_statistics_key_rule(@groupby)[:Name],         :data=>proc{|rec| show_groupkey_value(rec) },                        :title=>session_statistics_key_rule(@groupby)[:Title], :data_title=>session_statistics_key_rule(@groupby)[:Data_Title]}
  @column_options << {:caption=>session_statistics_key_rule(@groupby)[:info_caption], :data=>proc{|rec| show_info(rec.info) },                       :title=>"#{t(:active_session_history_last_occurrence_caption, :default=>'Further info for grouping criteria')}: #{@groupby}", :data_title=>proc{|rec| rec.info_hint} } if session_statistics_key_rule(@groupby)[:info_caption]
  @column_options << {:caption=>"Total Time waited",:data=>proc{|rec| fn(rec.time_waited_secs,0) },     :title=>t(:active_session_history_total_time_waited_hint, :default=>"Total time waited in seconds (sample-cycle(1/10 seconds) * samples)"), :align=>"right", :show_pct_hint=>true, :show_pct_background=>true}
  @column_options << {:caption=>"Avg. Load",        :data=>proc{|rec| fn(avg_load(rec),2) },            :title=>t(:active_session_history_load_hint, :default=>"Avg. number of waiting sessions averaged by time between first and last occurrence"), :align=>"right"}
  @column_options << {:caption=>t(:active_session_history_first_occurrence_caption, :default=>"First occurrence"), :data=>proc{|rec| localeDateTime(rec.first_occurrence) },      :title=>t(:active_session_history_first_occurrence_hint, :default=>"First occurrence of sample record in group")}
  @column_options << {:caption=>t(:active_session_history_last_occurrence_caption,  :default=>"Last occurrence"),  :data=>proc{|rec| localeDateTime(rec.last_occurrence) },       :title=>t(:active_session_history_last_occurrence_hint,  :default=>"Last occurrence of sample record in group")}
  @column_options << {:caption=>t(:active_session_history_duration_caption,         :default=>"Duration"),         :data=>proc{|rec| fn(rec.sample_dauer_secs,2) },  :title=>t(:active_session_history_duration_hint,         :default=>"Duration in seconds within time period"), :align=>"right"}
  @column_options << {:caption=>"Avg. Time waited", :data=>proc{|rec| fn(rec.time_waited_avg_ms,2)},    :title=>"Avg. time in milliseconds that the current session actually spent waiting for the event. This column is set for waits that were in progress at the time the sample was taken.", :align=>"right"}
  @column_options << {:caption=>"Samples",          :data=>proc{|rec| fn(rec.count_samples) },          :title=>t(:active_session_history_samples_hint, :default=>"Total number of sample records in group"), :align=>:right, :field_decorator_function=>decorator_single_rows }

  @column_options << {:caption=>'min_snap_id', :data=>proc{|rec| rec.min_snap_id}, :hidden=>:true}
  @column_options << {:caption=>'max_snap_id', :data=>proc{|rec| rec.max_snap_id}, :hidden=>:true}
  session_statistics_key_rules.each do |key, value|
    unless @groupby == key  || @groupfilter[key]            # Aktuelles oder früheres Gruppierungskriterium weglassen
      @column_options << {:caption=>"#{value[:Name]}_Cnt", :data=>proc{|rec| rec["#{value[:sql_alias]}_cnt"]}, :hidden=>:true}
      @column_options << {:caption=>value[:Name], :data=>proc{|rec| rec[value[:sql_alias]] } , :title=>"#{value[:Title]} #{t(:active_session_history_number_hint, :default=>"(< Number > if more occurrences)")}", :data_title=>(value[:Data_Title] ? "#{value[:Title]}:#{value[:Data_Title]}" : nil) , :field_decorator_function=>decorator_grouping(key)}
    end
  end


  @column_options << {:caption=>"Avg. PGA", :data=>proc{|rec| fn(rec.avg_pga_mb,2)},                                :title=>"Avg. amount of PGA in MB allocated per session",                           :align=>"right"}   if get_db_version >= "11.2"
  @column_options << {:caption=>"Max. PGA", :data=>proc{|rec| link_temp_and_pga_usage(rec, fn(rec.max_pga_mb,2))},  :title=>"Max. amount of PGA in MB allocated by one single session",                 :align=>"right"}   if get_db_version >= "11.2"
  @column_options << {:caption=>"Avg. Temp",:data=>proc{|rec| fn(rec.avg_temp_mb,2)},                               :title=>"Avg. amount of temp. tablespace in MB allocated per session",              :align=>"right"}   if get_db_version >= "11.2"
  @column_options << {:caption=>"Max. Temp",:data=>proc{|rec| link_temp_and_pga_usage(rec, fn(rec.max_temp_mb,2))}, :title=>"Max. amount of temp. tablespace in MB allocated by one single session",    :align=>"right"}   if get_db_version >= "11.2"
  @column_options << {:caption=>"CPU-Time", :data=>proc{|rec| fn(rec.tm_cpu_time_secs)},                            :title=>"Amount of time in seconds sampled sessions spent on CPU (per session)",    :align=>:right}    if get_db_version >= "11.2"
  @column_options << {:caption=>"DB-Time",  :data=>proc{|rec| fn(rec.tm_db_time_secs)},                             :title=>"Amount of time in seconds sampled sessions spent in database calls",       :align=>:right}    if get_db_version >= "11.2"
  @column_options << {:caption=>"Rd. Rq.",  :data=>proc{|rec| fn(rec.delta_read_io_requests)},                      :title=>"Number of read I/O requests made by the scanned sessions",                 :align=>"right"}   if get_db_version >= "11.2"
  @column_options << {:caption=>"Wr. Rq.",  :data=>proc{|rec| fn(rec.delta_write_io_requests)},                     :title=>"Number of write I/O requests made by the scanned sessions",                :align=>"right"}   if get_db_version >= "11.2"
  @column_options << {:caption=>"Rd. kB.",  :data=>proc{|rec| fn(rec.delta_read_io_kbytes)},                        :title=>"Number of I/O kBytes read by the scanned sessions",                        :align=>"right"}   if get_db_version >= "11.2"
  @column_options << {:caption=>"Wr. kB.",  :data=>proc{|rec| fn(rec.delta_write_io_kbytes)},                       :title=>"Number of I/O kBytes written by the scanned sessions",                     :align=>"right"}   if get_db_version >= "11.2"
  @column_options << {:caption=>"IC. kB.",  :data=>proc{|rec| fn(rec.delta_interconnect_io_kbytes)},                :title=>"Number of I/O kBytes sent over the I/O interconnect by the scanned sessions", :align=>"right"} if get_db_version >= "11.2"

%>

<%=
    @hidden_link_timeline_id = get_unique_area_id

    context_menu_entries = []
    def create_context_menu_entry(seconds)
      {:label   => t(:active_session_history_show_top_ten ,     :sec=>seconds, :default=>"Show Top 10 in time line, condensed by %{sec} seconds"),
       :hint    => t(:active_session_history_show_top_ten_hint, :sec=>seconds, :default=>"Show Top 10 ordered by total time waited in time line, each point in graph for sum over %{sec} seconds"),
       :ui_icon => "ui-icon-image",
       :action  => "$('##{@hidden_link_timeline_id}_#{seconds}').click();"
      }
    end

    context_menu_entries << create_context_menu_entry(60)
    context_menu_entries << create_context_menu_entry(10)
    context_menu_entries << create_context_menu_entry(1)


    gen_slickgrid(@sessions,
                   @column_options,
                   {
                       :caption => @caption ? @caption : "",
                       :max_height => 450,
                       :context_menu_entries => context_menu_entries
                   }
                  )
%>

<%
  def link_timeline(group_seconds)
    my_ajax_link_to("Hidden Auslöser für Timeline",
                    url_for({:action        => "list_session_statistic_historic_timeline",
                             :groupfilter   => @groupfilter,
                             :groupby       => @groupby,
                             :group_seconds => group_seconds,
                             :update_area   => "#{@update_area}_timeline"
                            }
                    ),
                    :style=>"display:none",
                    :id=>"#{@hidden_link_timeline_id}_#{group_seconds}"
    )
  end

%>

<%= link_timeline(60) %>
<%= link_timeline(10) %>
<%= link_timeline( 1) %>


<div id="<%= @update_area %>_timeline" style="float:left; width:100%; "></div>
<div id="<%= @update_area %>"          style="clear:both; width:100%; "></div>


<script type="text/javascript">
    $("#<%= @time_selection_start_id %>").datetimepicker();
    $("#<%= @time_selection_end_id   %>").datetimepicker();
</script>

