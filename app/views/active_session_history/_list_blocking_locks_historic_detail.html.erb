<%
  @update_area = get_unique_area_id

  def link_blocked_sessions_direct(rec)
    if rec.blocked_sessions_direct != 0
      my_ajax_link_to(rec.blocked_sessions_direct == 1 ? rec.max_blocked_session_direct : "< #{fn(rec.blocked_sessions_direct)} >",
                      url_for( :action               => :list_blocking_locks_historic_detail,
                               :update_area          => @update_area,
                               :sample_id            => @sample_id,
                               :min_snap_id          => rec.min_snap_id,
                               :max_snap_id          => rec.max_snap_id,
                               :min_sample_time      => localeDateTime(rec.min_sample_time),
                               :max_sample_time      => localeDateTime(rec.max_sample_time),
                               :time_selection_start => @time_selection_start,
                               :time_selection_end   => @time_selection_end,
                               :blocking_instance    => rec.instance_number,
                               :blocking_session     => rec.session_id,
                               :blocking_session_serialno => rec.session_serialno
                             ),
                      :title=>t(:active_session_history_list_blocking_locks_historic_detail_sessions_direct_hint, :default=>"Show sessions blocked by this blocking session")
                      )
    end
  end

  def show_total_blocked(rec)
    if rec.blocked_sessions_total != 0
      rec.blocked_sessions_total == 1 ? rec.max_blocked_session_total : "< #{fn(rec.blocked_sessions_total)} >"
    end
  end

  def link_column_sql_id(rec)
    if rec.sql_id && rec.sql_id['<']
      my_ajax_link_to(rec.sql_id,
        url_for(:action     => :list_session_statistic_historic_grouping,
              :groupfilter  => {
                                :Instance                 => rec.instance_number,
                                "Session-ID"              => rec.session_id,
                                :SerialNo                 => rec.session_serialno,
                                :Idle_Wait1               => "PX Deq Credit: send blkd",
                                :DBID                     => get_dbid,
                                :time_selection_start     => localeDateTime(rec.min_sample_time),
                                :time_selection_end       => localeDateTime(rec.max_sample_time),
                                :Min_Snap_ID              => rec.min_snap_id,
                                :Max_Snap_ID              => rec.max_snap_id,
                                :Blocking_Session_Status  => rec.root_blocking_session_status
                        },
              :groupby      => 'SQL-ID',
              :update_area  => @update_area
            ),
         :title=>t(:active_session_history_list_blocking_locks_historic_detail_link_sql_id_hint, :default=>"Show wait history of blocked session grouped by SQL-ID")
      )
    else
      link_historic_sql_id(rec.instance_number, rec.sql_id, @time_selection_start, @time_selection_end, @update_area, rec.username)
    end
  end

  def link_column_sid(rec)
      my_ajax_link_to(rec.session_id,
        url_for(:action     => :list_session_statistic_historic_grouping,
              :groupfilter  => {
                                :Instance             => rec.instance_number,
                                "Session-ID"          => rec.session_id,
                                :SerialNo             => rec.session_serialno,
                                :Idle_Wait1           => "PX Deq Credit: send blkd",
                                :DBID                 => get_dbid,
                                :time_selection_start => localeDateTime(rec.min_sample_time),
                                :time_selection_end   => localeDateTime(rec.max_sample_time),
                                :Min_Snap_ID          => rec.min_snap_id,
                                :Max_Snap_ID          => rec.max_snap_id
                        },
              :groupby      => 'Session/Sn.',
              :update_area  => @update_area
            ),
         :title=>t(:active_session_history_list_blocking_locks_historic_detail_link_sid_hint, :default=>"Show wait history of blocked session")
      )
  end


  def link_column_blocked_object(rec)
  end

  def link_column_sample_count_direct(rec)
    my_ajax_link_to(fn(rec.sample_count_direct),
                      url_for(:action           => :list_session_statistic_historic_single_record,
                              :update_area      => @update_area,
                              :groupfilter      => {
                                :Instance                 => rec.instance_number,
                                "Session-ID"              => rec.session_id,
                                :SerialNo                 => rec.session_serialno,
                                :Blocking_Session         => @blocking_session,
                                :Blocking_Session_Status  => rec.root_blocking_session_status,
                                :Idle_Wait1               => "PX Deq Credit: send blkd",
                                :DBID                     => get_dbid,
                                :time_selection_start     => localeDateTime(rec.min_sample_time),
                                :time_selection_end       => localeDateTime(rec.max_sample_time),
                                :Min_Snap_ID              => rec.min_snap_id,
                                :Max_Snap_ID              => rec.max_snap_id
                              }
                      ),
                      :title=>t(:dba_list_dml_locks_historic_detail_link_column_sample_count_hint, :default=>"Show records from active session history with blocking of this session")
    )
  end

  def link_blocked_sql_id(rec)
    if rec.blocked_sql_id && rec.blocked_sql_id[0] != '<'
      link_historic_sql_id(rec.blocked_instance, rec.blocked_sql_id, localeDateTime(rec.min_sample_time), localeDateTime(rec.max_sample_time), @update_area, rec.blocked_username)
    else
      rec.blocked_sql_id
    end
  end


  def link_blocking_object(rec)
    result = ''
    result << rec.root_blocking_object_type << ' ' if rec.root_blocking_object_type && rec.root_blocking_object_type != '< 0 >'
    if rec.root_blocking_object_owner && rec.root_blocking_object && rec.root_blocking_object_owner[0] != '<' && rec.root_blocking_object[0] != '<'
      result << link_object_description(@update_area, rec.root_blocking_object_owner, rec.root_blocking_object)
      result << " (#{rec.root_blocking_subobject})"       if rec.root_blocking_subobject        && rec.root_blocking_subobject        != '< 0 >'
      result << " (#{rec.root_blocking_object_addition})" if rec.root_blocking_object_addition  && rec.root_blocking_object_addition  != '< 0 >'
    else
      result << rec.root_blocking_object_owner << '.' if rec.root_blocking_object_owner && rec.root_blocking_object_owner != '< 0 >'
      result << rec.root_blocking_object              if rec.root_blocking_object       && rec.root_blocking_object       != '< 0 >'
    end

    result << link_file_block_row(rec['blocking_file_no'], rec['blocking_block_no'], rec['blocking_row_no'], rec.blocking_data_object_id, "#{@update_area}_#{rec.hash.abs}", true)  # nach Oracle 11.2 und auch belegt (nur belegt wenn eindeutig)

    result
  end


  def link_blocked_object(rec)
    result = ''
    result << rec.blocked_object_type << ' ' if rec.blocked_object_type && rec.blocked_object_type != '< 0 >'
    if rec.blocked_object_owner && rec.blocked_object && rec.blocked_object_owner[0] != '<' && rec.blocked_object[0] != '<'
      result << link_object_description(@update_area, rec.blocked_object_owner, rec.blocked_object)
      result << " (#{rec.blocked_subobject})"       if rec.blocked_subobject        && rec.blocked_subobject        != '< 0 >'
      result << " (#{rec.blocked_object_addition})" if rec.blocked_object_addition  && rec.blocked_object_addition  != '< 0 >'
    else
      result << rec.blocked_object_owner << '.' if rec.blocked_object_owner && rec.blocked_object_owner != '< 0 >'
      result << rec.blocked_object              if rec.blocked_object       && rec.blocked_object       != '< 0 >'
    end

    result << link_file_block_row(rec['blocked_file_no'], rec['blocked_block_no'], rec['blocked_row_no'], rec.blocked_data_object_id, "#{@update_area}_#{rec.hash.abs}", true)  # nach Oracle 11.2 und auch belegt (nur belegt wenn eindeutig)

    result
  end


  column_options =
    [
      {:caption=>'First occ.',                :data=>proc{|rec| localeDateTime(rec.min_sample_time) },          :title=>t(:active_session_history_list_blocking_locks_historic_first_occur_hint, :default=>'First occurrence of lock (rounded to 1 or 10 seconds)') },
      {:caption=>'Last occ.',                 :data=>proc{|rec| localeDateTime(rec.max_sample_time) },          :title=>t(:active_session_history_list_blocking_locks_historic_last_occur_hint, :default=>'Last occurrence of lock (rounded to 1 or 10 seconds)') },
      {:caption=>'Dead lock',                 :data=>proc{|rec| rec.deadlock },                                 :title=>'Deadlock between this session and another preceding session?' },
      {:caption=>'Samples direct',            :data=>proc{|rec| link_column_sample_count_direct(rec)},          :title=>t(:active_session_history_list_blocking_locks_historic_detail_samples_direct_hint, :default => 'Number of records in active session history with blocking of this session' ), :align=>"right"},
      {:caption=>"Session wait (sec.)",       :data=>proc{|rec| fn(rec.max_seconds_in_wait_direct,1)},          :title=>t(:active_session_history_list_blocking_locks_historic_detail_session_waiting_hint, :default => "Number of seconds this session is waiting in blocked state for the blocking sessions.\nMaximum value at one time in considered period.\nFrom v$Session.wait_Time + Time_Waited\nMay contain cumulated wait time also from before start of considered time period" ), :align=>"right"},
      {:caption=>"Waiting (sec.)",            :data=>proc{|rec| fn(rec.seconds_in_wait_sample_direct,1) },      :title=>t(:active_session_history_list_blocking_locks_historic_detail_session_wait_sample_hint, :default=>"Time in seconds this session is waiting in blocked state for blocking session within the considered time range.\nWeighted value calculated by the number of sample records in active session history")  , :align=>"right"},
      {:caption=>"I.",                        :data=>proc{|rec| rec.instance_number },                          :title=>t(:active_session_history_list_blocking_locks_historic_detail_instance_hint, :default=>"Instance of waiting blocked session")},
      {:caption=>"SID",                       :data=>proc{|rec| link_column_sid(rec) },                         :title=>t(:active_session_history_list_blocking_locks_historic_detail_sid_hint, :default=>'SID of blocked session' ), :data_title=>proc{|rec| "%t\nSerialNo=#{rec.session_serialno}"} },
      {:caption=>"User",                      :data=>proc{|rec| rec.username },                                 :title=>t(:active_session_history_list_blocking_locks_historic_detail_user_hint, :default=>'User of blocked session') },
      {:caption=>"SQL-ID",                    :data=>proc{|rec| link_column_sql_id(rec) },                      :title=>t(:active_session_history_list_blocking_locks_historic_detail_sql_id_hint, :default=>'Active SQL of blocked session (or number if multiple SQLs were active in period') },
      {:caption=>"Event",                     :data=>proc{|rec| rec.event },                                    :title=>t(:active_session_history_list_blocking_locks_historic_detail_event_hint, :default=>"Wait event of blocked session (or number if multiple)"), :data_title=>proc{|rec| "%t\n#{explain_wait_event(rec.event)}"} },
      {:caption=>"Module",                    :data=>proc{|rec| rec.module },                                   :title=>'Module of blocked session (or number if multiple modules were active in period' },
      {:caption=>"Action",                    :data=>proc{|rec| rec.action },                                   :title=>'Action of blocked session (or number if multiple modules were active in period' },
      {:caption=>"Blocking Object",           :data=>proc{|rec| link_blocking_object(rec) },                    :title=>t(:active_session_history_list_blocking_locks_historic_detail_blocking_object_hint, :default=>"Blocking object for this session (or number if multiple)") },
      {:caption=>"Direct Blocked",            :data=>proc{|rec| link_blocked_sessions_direct(rec)},             :title=>t(:active_session_history_list_blocking_locks_historic_detail_direct_blocked_hint, :default=>"Number of sessions directly blocked by this session"), :align=>"right"},
      {:caption=>"Total Blocked",             :data=>proc{|rec| show_total_blocked(rec)},                       :title=>t(:active_session_history_list_blocking_locks_historic_detail_total_blocked_hint, :default=>"Total number of sessions blocked by tis session directly or indirectly"), :align=>"right"},
      {:caption=>'Max. depth',                :data=>proc{|rec| rec.maxlevel if rec.maxlevel > 0},              :title=>t(:active_session_history_list_blocking_locks_historic_sessions_maxlevel_hint, :default=>'Maximum depth of hierarchic blocking dependency'), :align=>"right"},
      {:caption=>"Total blocked wait (sec.)", :data=>proc{|rec| fn(rec.max_sec_in_wait_blocked_total,1) if rec.blocked_sessions_total != 0},    :title=>t(:active_session_history_list_blocking_locks_historic_total_wait_caption, :default=>"Sum over seconds in wait for indirect and direct blocked sessions.\nMaximum value at one time in considered period.\nFrom v$Session.wait_Time + Time_Waited\nMay contain cumulated wait time also from before start of considered time period."), :align=>"right"},
      {:caption=>"Blocked waiting (sec.)",    :data=>proc{|rec| fn(rec.seconds_in_wait_blocked_sample,1) if rec.blocked_sessions_total != 0},   :title=>t(:active_session_history_list_blocking_locks_historic_sample_wait_caption, :default=>"Time in seconds indirect and direct blocked sessions are waiting within the considered time range.\nWeighted value calculated by the number of sample records in active session history")  , :align=>"right"},
      {:caption=>"Blocked Object",            :data=>proc{|rec| link_blocked_object(rec) },                     :title=>t(:active_session_history_list_blocking_locks_historic_detail_blocking_object_hint, :default=>"Blocking object for this session (or number if multiple)") },
      {:caption=>"W.I.",                      :data=>proc{|rec| rec.blocked_instance },                         :title=>t(:active_session_history_list_blocking_locks_historic_waiting_instance_hint, :default=>'Instance of of directly blocked sessions (or number if multiple)')},
      {:caption=>"W.User",                    :data=>proc{|rec| rec.blocked_username },                         :title=>t(:active_session_history_list_blocking_locks_historic_waiting_user_hint, :default=>'User of directly blocked sessions (or number if multiple)')},
      {:caption=>"W.SQL-ID",                  :data=>proc{|rec| link_blocked_sql_id(rec) } ,                    :title=>t(:active_session_history_list_blocking_locks_historic_waiting_sqlid_hint, :default=>'Executed SQL of directly blocked sessions (or number if multiple)')},
      {:caption=>"W.Event",                   :data=>proc{|rec| rec.blocked_event } ,                           :title=>t(:active_session_history_list_blocking_locks_historic_waiting_event_hint, :default=>'Wait event of directly blocked sessions (or number if multiple)'), :data_title=>proc{|rec| "%t\n#{explain_wait_event(rec.blocked_event)}"} },
      {:caption=>"W.Module",                  :data=>proc{|rec| rec.blocked_module },                           :title=>'Module of directly blocked sessions (or count if multiple modules)'},
      {:caption=>"W.Action",                  :data=>proc{|rec| rec.blocked_action },                           :title=>'Action of directly blocked sessions (or count if multiple actions)'},
  
    ]

  caption = 'Sessions locked by '
  caption << "Instance=#{@blocking_instance}"             if @blocking_instance
  caption << ", SID=#{@blocking_session}"                 if @blocking_session
  caption << ", SerialNo=#{@blocking_session_serialno}"   if @blocking_session_serialno

  caption << "GLOBAL (unknown sessions from other RAC-instances)" unless @blocking_session
  %>



<%= gen_slickgrid(@locks, column_options, {
        :caption  => caption,
        :max_height => 450
}) %>

<div id="<%= @update_area %>" style="clear: both;">
</div>
