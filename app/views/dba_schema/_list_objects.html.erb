<%
  @update_area = get_unique_area_id

   def link_partition(rec)
     if (Float(rec.partition_name) rescue false)
       my_ajax_post_link(rec.partition_name,     # Verhindern Zeilenumbruch in Anzeige
                     {:action           => :list_objects,
                      :tablespace       => {:name => @tablespace_name},
                      :schema           => {:name => rec.owner},
                      :segment_name     => rec.segment_name,
                      :showPartitions   => 1,
                      :update_area      => @update_area,
                             },
                     :title=>'Show details for partitions'
       )
     else
       rec.partition_name
     end
   end


  column_options =
  [
    {:caption=> 'TS',                :data=>proc{|rec| rec.tablespace_name},                     :title=> 'Tablespace-Name'},
    {:caption=> 'Schema',            :data=>proc{|rec| rec.owner},                               :title=> 'Schema-Name'},
    {:caption=> 'Name', :data=>proc{|rec| link_object_description(@update_area, rec.owner, rec.segment_name, rec.segment_name_qual)}, :title=> 'Object-Name'},
    {:caption=> 'Partition',         :data=>proc{|rec| link_partition(rec)},                      :title=> t(:dba_schema_list_objects_partition_hint, :default=>'Partition name or number of partitions')},
    {:caption=> 'Type',              :data=>proc{|rec| rec.segment_type},                        :title=> 'Object-Type'},
    {:caption=> 'Compression',       :data=>proc{|rec| h rec.compression},                       :title=> t(:dba_schema_list_objects_compression_hint, :default => 'Type of compression if compression is used')},
    {:caption=> 'Used Ext',          :data=>proc{|rec| fn(rec.used_ext)},        :align=>:right, :title=> t(:dba_schema_list_objects_used_extents_hint, :default=>'Number of used extents')},
    {:caption=> 'MBytes',            :data=>proc{|rec| fn(rec.mbytes)},          :align=>:right, :title=> t(:dba_schema_list_objects_mbytes_hint, :default=>'Size of extents in tablespace in MBytes'),  :show_pct_hint=>true},
    {:caption=> 'NumRows',           :data=>proc{|rec| fn(rec.num_rows)},        :align=>:right, :title=> t(:dba_schema_list_objects_num_rows_hint, :default=>'Number of rows acording to last analysis')},
    {:caption=> 'Rowlen',            :data=>proc{|rec| fn(rec.avg_rowlen)},      :align=>:right, :title=> t(:dba_schema_list_objects_row_len_hint, :default=>'Average size of record according to last analysis (Avg_Row_Len for Tables, Sum of Avg_Col_Len + RowID for indexes)')  },
    {:caption=> '% unused',          :data=>proc{|rec| fn(rec.percent_free)},    :align=>:right, :title=> t(:dba_schema_list_objects_pct_free_hint, :default=>'Unused storage within extents in %. Calculated by Extents - (Avg_Row_Len*Num_Rows)')},
    {:caption=> 'MBytes unused ARL', :data=>proc{|rec| fn(rec.mbytes_free_avg_row_len)}, :align=>:right, :title=> t(:dba_schema_list_objects_mbytes_free_hint, :default=>'Unused storage within extents in MBytes. Calculated by Extents - (Avg_Row_Len*Num_Rows)' ) },
    {:caption=> 'Blocks empty',      :data=>proc{|rec| fn(rec.empty_blocks)},    :align=>:right, :title=> t(:dba_schema_list_objects_empty_blocks_hint, :default=>'Unused blocks according to empty_blocks')},
    {:caption=> 'Avg. Space',        :data=>proc{|rec| fn(rec.avg_space)},       :align=>:right, :title=> t(:dba_schema_list_objects_avg_space_hint, :default=>'Average unused bytes per block according to avg_space') },
    {:caption=> 'Analyzed',          :data=>proc{|rec| localeDateTime(rec.last_analyzed)},       :title=> t(:dba_schema_list_objects_last_anaylze_hint, :default=>'Timestamp of last anylysis') },
  ]
%>

<%= gen_slickgrid(@objects, column_options, {
        :caption => "#{t(:dba_schema_list_objects_caption, :default=>'Objects for')} #{"Tablespace='#{@tablespace_name}'" if @tablespace_name} #{"Schema='#{@schema_name}'" if @schema_name}",
        :max_height => 450
})
%>


<div id="<%= @update_area %>"></div>