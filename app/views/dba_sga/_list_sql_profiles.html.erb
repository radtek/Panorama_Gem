<% @update_area_sql_profiles = get_unique_area_id %>

<%=
    
    def link_profile_name(rec)
      my_ajax_post_link(rec.name, {
                        :controller    => :dba_sga,
                        :action        => :list_sql_profile_detail,
                        :profile_name  => rec.name,
                        :update_area    => @update_area_sql_profiles,
                        },
                        :title          => 'Show details for SQL profile'
      )

    end  
    
    if @sql_profiles &&  @sql_profiles.length > 0
        column_options = [
            {:caption=>"Name",          :data=>proc{|rec| link_profile_name(rec)},              :title=>"Name of profile"},
            {:caption=>'Really used?',  :data=>proc{|rec| rec.name == @sql.sql_profile ? 'YES' : 'NO'}, :title=>'Is this profile really used according to gv$SQL.SQL_Profile' },
            {:caption=>"Category",      :data=>proc{|rec| rec.category},                        :title=>"Category of profile" },
            {:caption=>"Created",       :data=>proc{|rec| localeDateTime(rec.created)},         :title=>"Timestamp of creation" },
            {:caption=>"Last modified", :data=>proc{|rec| localeDateTime(rec.last_modified)},   :title=>"Timestamp of last modification" },
            {:caption=>"Description",   :data=>proc{|rec| rec.description},                     :title=>"Text description provided for the SQL profile" },
            {:caption=>"Type",          :data=>proc{|rec| rec.type},                            :title=>"Type of the SQL profile (how it was created)" },
            {:caption=>"Status",        :data=>proc{|rec| rec.status},                          :title=>"Status of the SQL profile" },
            {:caption=>"Force matching",:data=>proc{|rec| rec.force_matching},                  :title=>"If TRUE this causes SQL Profiles to target all SQL statements which have the same text after normalizing all literal values to bind variables. (Note that if a combination of literal values and bind variables is used in the same SQL text, no transformation occurs). This is analogous to the matching algorithm use by the FORCE option of the CURSOR_SHARING parameter.\nIf FALSE, literals are not transformed. This is analogous to the matching algorithm used by the EXACT option of the CURSOR_SHARING parameter." },
          ]

        gen_slickgrid(@sql_profiles, column_options, {
                :caption => "<div style=\"background-color: coral;\">SQL-Profiles exists for SQL (from DBA_SQL_Profiles)</div>".html_safe
        })
    end
%>

<%=
    if @sql_plan_baselines &&  @sql_plan_baselines.length > 0
        column_options = []
        column_options << {:caption=>"Plan name",     :data=>proc{|rec| rec.plan_name},                       :title=>"Name of baseline plan"}
        column_options << {:caption=>'Really used?',  :data=>proc{|rec| rec.plan_name == @sql['sql_plan_baseline'] ? 'YES' : 'NO'}, :title=>'Is this baseline really used according to gv$SQL.SQL_Plan_Baseline' } if @sql.has_key?('sql_plan_baseline')
        column_options << {:caption=>"Creator",       :data=>proc{|rec| rec.creator},                         :title=>"Name of creator"}
        column_options << {:caption=>"Origin",        :data=>proc{|rec| rec.origin},                          :title=>"how plan baseline was created" }
        column_options << {:caption=>"Parsing schema name", :data=>proc{|rec| rec.parsing_schema_name},       :title=>"Parsing schema name" }
        column_options << {:caption=>"Description",   :data=>proc{|rec| rec.description},                     :title=>"Description of purpose" }
        column_options << {:caption=>"Version",       :data=>proc{|rec| rec.version},                         :title=>"database version at time of plan baseline creation" }
        column_options << {:caption=>"Created",       :data=>proc{|rec| localeDateTime(rec.created)},         :title=>"Timestamp of creation" }
        column_options << {:caption=>"Last modified", :data=>proc{|rec| localeDateTime(rec.last_modified)},   :title=>"Timestamp of last modification" }
        column_options << {:caption=>"Last executed", :data=>proc{|rec| localeDateTime(rec.last_executed)},   :title=>"Timestamp of last execution" }
        column_options << {:caption=>"Last verified", :data=>proc{|rec| localeDateTime(rec.last_verified)},   :title=>"Timestamp of last verification" }
        column_options << {:caption=>"Enabled",       :data=>proc{|rec| rec.enabled},                         :title=>"enabled status of plan baseline" }
        column_options << {:caption=>"Accepted",      :data=>proc{|rec| rec.accepted},                        :title=>"accepted status of plan baseline" }
        column_options << {:caption=>"Fixed",         :data=>proc{|rec| rec.fixed},                           :title=>"fixed status of plan baseline" }
        column_options << {:caption=>"Reproduced",    :data=>proc{|rec| rec.reproduced},                      :title=>"reproduced status of plan baseline" }
        column_options << {:caption=>"Auto purge",    :data=>proc{|rec| rec.autopurge},                       :title=>"autopurge status of plan baseline" }
        column_options << {:caption=>"Executions",    :data=>proc{|rec| fn(rec.executions)},                  :title=>"number of plan baseline executions", :align=>:right }
        column_options << {:caption=>"Buffer gets",   :data=>proc{|rec| fn(rec.buffer_gets)},                 :title=>"total buffer gets",        :align=>:right }
        column_options << {:caption=>"Rows processed",:data=>proc{|rec| fn(rec.rows_processed)},              :title=>"number of rows processed", :align=>:right }

        gen_slickgrid(@sql_plan_baselines, column_options, {
                :caption => "<div style=\"background-color: coral;\">SQL plan baselines exists for SQL (from DBA_SQL_Plan_Baselines)</div>".html_safe
        })
    end
%>



<%=
    if @sql_outlines &&  @sql_outlines.length > 0
        column_options = [
            {:caption=>"Name",          :data=>proc{|rec| rec.name},                            :title=>"Name of the outline"},
            {:caption=>"Owner",         :data=>proc{|rec| rec.owner},                           :title=>"User who created the outline"},
            {:caption=>"Category",      :data=>proc{|rec| rec.category},                        :title=>"Category to which the outline belongs" },
            {:caption=>"Used",          :data=>proc{|rec| rec.used},                            :title=>"Flag indicating whether the outline has ever been used" },
            {:caption=>"Timestamp",     :data=>proc{|rec| localeDateTime(rec.timestamp)},       :title=>"Timestamp at which the outline was created" },
            {:caption=>"Version",       :data=>proc{|rec| rec.version},                         :title=>"Oracle Version that created the outline" },
            {:caption=>"Compatible",    :data=>proc{|rec| rec.compatible},                      :title=>"Flag indicating whether the outline hints were compatible across migration" },
            {:caption=>"Enabled",       :data=>proc{|rec| rec.enabled},                         :title=>"Flag indicating whether the outline is enabled" },
            {:caption=>"Format",        :data=>proc{|rec| rec.format},                          :title=>"Flag indicating what hint format is used" },
            {:caption=>"Migrated",      :data=>proc{|rec| rec.migrated},                        :title=>"Flag indicating whether the outline has been migrated to SQL plan baseline" },
          ]

        gen_slickgrid(@sql_outlines, column_options, {
                :caption => "<div style=\"background-color: coral;\">Stored outlines exists for SQL (from DBA_Outlines)</div>".html_safe
        })
    end
%>
<div id="<%= @update_area_sql_profiles %>"></div>


