<%

  @update_area = get_unique_area_id
  @table_id_prefix = get_unique_area_id

# Anzeige sowohl des konkreten Wertes als auch je Execution in zwei TD-Abschnitten
def show_both_values(name, param, decimals, title="", show_per_result_row=false)
  param = param.to_f   # Sicherstellen Typ
  execs = @sql.executions.to_i==0 ? 1 : @sql.executions.to_i;

    if show_per_result_row && @sql.rows_processed.to_i > 0                        # Suppress division by 0
      per_res_row = "\n#{formattedNumber(param/@sql.rows_processed.to_i, decimals+2)} per result row"
    else
      per_res_row = ''
    end

  "<tr>
     <td title='#{title}'>#{name}</td>
     <td align='right' title='#{title}#{per_res_row}'>#{formattedNumber(param,decimals)}</td>
     <td align='right' title='#{title} #{t(:per_execution, :default=>'per execution')}#{per_res_row}'>#{formattedNumber( (param/execs),(decimals+2))}</td>
   </tr>".html_safe
end

  # Anzeige des konkreten Wertes ohne je Execution in zwei TD-Abschnitten
def show_single_value(name, param, decimals, title="", second_value="-", second_title="")
  "<tr><td title='#{title}'>#{name}</td><td align='right' title='#{title}'>#{formattedNumber(param,decimals)}</td><td title='#{second_title}' align='center'>#{second_value}</td></tr>".html_safe
end
%>


<%= render_page_caption("#{t(:dba_history_list_sql_detail_historic_caption, :default=>'Statement details from')} #{PanoramaSamplerStructureCheck.adjust_table_name('DBA_Hist_SQLStat')} #{@sql.first_occurrence ? localeDateTime(@sql.first_occurrence) : @time_selection_start} #{t(:until, :default=>'until')} #{@sql.last_occurrence ? localeDateTime(@sql.last_occurrence) : @time_selection_end} : Instance = #{@instance}, SQL-ID = '#{@sql_id}'", get_recall_params_info_for_render_page_caption) %>

<table id="<%= "#{@table_id_prefix}_main" %>" border="0" >
  <tr>
    <td valign="top" ><pre id="<%= "#{@table_id_prefix}_sql" %>" class="monospace" style="overflow-y: auto;"><%= convert_word_wrap_comma(format_sql(@sql_statement, params[:window_width])) %></pre></td>
    <td valign="top">
      <table  id="<%= "#{@table_id_prefix}_right_single_table" %>" border="1" width="100%" style="font-size:small;">
        <tr title="Parsing schema name">            <td>Parsing schema name</td><td align="center"><%= @sql.min_parsing_schema_name %></td>        </tr>
        <tr title="<%= t(:dba_history_list_sql_detail_historic_last_plan_hash_hint, :default=>"Hash-value of last execution plan") %> + <%= t(:dba_history_list_sql_detail_historic_plan_count_hint, :default=>"Number of different execution plans in time period (if > 1)") %>">            <td>Plan-Hash-Value</td><td align="center"><%= "#{@sql.last_plan_hash_value}#{" <span style='background-color:orange;'>( #{@sql.plan_hash_value_count} )</span>" if @sql.plan_hash_value_count > 1}".html_safe %></td>        </tr>
        <tr title="Hash-value over total optimizer environment + Number of different optimizer environments in time period (if > 1)">            <td>Optimizer Env Hash-Value</td><td align="center"><%= "#{@sql.last_optimizer_env_hash_value}#{" <span style='background-color:orange;'>( #{@sql.optimizer_env_hash_value_count} )</span>" if @sql.optimizer_env_hash_value_count > 1}".html_safe %></td>        </tr>
        <tr title="<%= t(:dba_history_list_sql_detail_historic_module_action_hint, :default=>"Module and action of last parsing session")%>">            <td>Parsing module</td><td align="center">
          <%=
            @update_area_module = get_unique_area_id
            ajax_link(@sql.last_module, {
                :controller   => :dba_sga,
                :action       => :show_application_info,
                :update_area  => @update_area_module,
                :org_text     => @sql.last_module
            },
                      :title=>t(:dba_history_list_sql_detail_historic_module_link_hint, :default=>'Explanation of module name'))
          %>
          <div id='<%= @update_area_module %>'></div>
        </td>        </tr>
        <tr title="<%= t(:dba_history_list_sql_detail_historic_module_action_hint, :default=>"Module and action of last parsing session")%>">            <td>Parsing action</td><td align="center">
          <%=
            @update_area_action = get_unique_area_id
            ajax_link(@sql.last_action, {
                :controller   => :dba_sga,
                :action       => :show_application_info,
                :update_area  => @update_area_action,
                :org_text     => @sql.last_action
            },
                      :title=>t(:dba_history_list_sql_detail_historic_action_link_hint, :default=>'Explanation of action name'))
          %>
          <div id='<%= @update_area_action %>'></div>
        </td>        </tr>
        <tr title="Begin of AWR-snapshot with first occurrence of SQL"> <td>First AWR-snapshot</td><td align="center"><%= localeDateTime(@sql.first_occurrence) %></td>        </tr>
        <tr title="End of AWR-snapshot with last occurrence of SQL"> <td>Last AWR-snapshot</td><td align="center"><%= localeDateTime(@sql.last_occurrence) %></td>        </tr>
        <tr title="Earliest sample of SQL in active session history"> <td>First ASH-sample</td><td align="center"><%= localeDateTime(@sql.min_sample_time) %></td>        </tr>
        <tr title="Latest sample of SQL in active session history"> <td>Last ASH-sample</td><td align="center"><%= localeDateTime(@sql.max_sample_time) %></td>        </tr>
        <tr title="<%= t(:dba_sga_list_sql_sga_stat_hit_ration_hint, :default=>'Ratio cache hits to buffer gets') %>">            <td>Buffer cache hit ratio</td><td align="center"><%= fn(@sql.hit_ratio, 2) %></td>        </tr>
        <tr title="Number of times the object was loaded or reloaded after invalidisation of cursor">            <td>Loads</td><td align="center"><%= fn(@sql.loads) %></td>        </tr>
      </table>


      <table  id="<%= "#{@table_id_prefix}_right_table" %>" border="1" width="100%" style="font-size:small;">
        <tr><th>Metric-Name</th><th>Total</th><th>Per Exec.</th></tr>
        <%= show_single_value("Executions", @sql.executions,0, "Number of executions in time period") %>
        <%= show_both_values("Parse calls", @sql.parse_calls,0, "Number of parse calls") %>
        <%= show_both_values("Fetches ", @sql.fetches, 0, "Number of fetches in time period (Avg. #{@sql.rows_processed/@sql.fetches rescue nil} rows per fetch)")%>
        <%= show_both_values("Sorts", @sql.sorts,0, "Number of sorts in time period") %>
        <tr>
          <td title="Number of rows processed in time period">Rows processed</td>
          <td align='right' title="Number of rows processed in time period"><%= fn(@sql.rows_processed)%></td>
          <td align='right' title="Number of rows processed in time period per execution"><%= fn(@sql.rows_processed.to_f/ (@sql.executions.to_i==0 ? 1 : @sql.executions), 2) %></td>
        </tr>
        <%= show_both_values('Buffer gets', @sql.buffer_gets,0, 'Number of total DB-blocks read', true) %>
        <%= show_both_values("Disk reads", @sql.disk_reads,0, "Number of db blocks read from disk\nAvg. time per db block read from disk = #{fn((@sql.disk_reads && @sql.disk_reads>0 ? @sql.user_io_wait_time_secs*1000/@sql.disk_reads : 0),2)} ms\nAvg. disk transfer speed = #{fn((@sql.user_io_wait_time_secs && @sql.user_io_wait_time_secs>0 ? @sql.disk_reads * PanoramaConnection.db_blocksize / (1024*1024) / @sql.user_io_wait_time_secs : 0),2)} MB/sec. (per single session if using PQ) ", true) %>
        <%= show_both_values("Elapsed time (sec), incl. parallel query slaves", @sql.elapsed_time_secs,2, "Runtime total in Seconds, sum over all PQ-processes", true)%>
        <%= show_both_values("CPU-time (sec)", @sql.cpu_time_secs, 2, "CPU-time total in seconds, sum over all PQ-processes", true) %>
        <%= show_both_values("Application wait time (sec)", @sql.application_wait_time_secs, 2, "Application wait-time total in seconds, incl. row lock waits", true) %>
        <%= show_both_values("Concurrency wait time (sec)", @sql.concurrency_wait_time_secs, 2, "Concurrency wait-time total in seconds", true) %>
        <%= show_both_values("Cluster wait time (sec)", @sql.cluster_wait_time_secs, 2, 'Wait time caused by RAC cluster issues', true) %>
        <%= show_both_values("User-IO wait time (sec)", @sql.user_io_wait_time_secs, 2, 'Wait time caused by I/O operations', true) %>
        <%= show_both_values("PL/SQL execution time (sec)", @sql.plsql_exec_time_secs, 2, "PL/SQL Execution-Time (Sec.) anteilig von CPU-Time", true) %>
      </table>
    </td>
  </tr>
</table>

</b>

<%= render :partial=>"dba_sga/list_sql_profiles" %>

<% if get_db_version >= '12.1' %>
    <% @update_area_sql_translation = get_unique_area_id %>
    <script type="text/javascript">
        ajax_html('<%= @update_area_sql_translation %>', 'dba_sga', 'show_sql_translations', {update_area: "<%= @update_area_sql_translation %>", translated_sql_id: "<%= @sql_id%>"});
    </script>
    <div id="<%= @update_area_sql_translation %>"></div>
<% end %>

<%
def link_bind_samples(rec)
  ajax_link(fn(rec.samples), {
                          :action               => :list_bind_samples_historic,
                          :sql_id               => @sql_id,
                          :instance             => rec.instance_number,
                          :position             => rec.position,
                          :min_snap_id          => @sql.min_snap_id,
                          :max_snap_id          => @sql.max_snap_id,
                          :update_area=> @update_area
                  },
                  :title=>'List all samples for this bind position in time period' )
end
%>

<%=
column_options = [
        {:caption=>"I",          :data=>proc{|rec| rec.instance_number},                        :title=>'RAC-Instance' },
    {:caption=>"Pos",           :data=>proc{|rec| formattedNumber(rec.position)},   :title=>t(:dba_history_list_sql_detail_historic_bind_pos, :default=>"Position of bind variable in statement"), :align=>"right"},
    {:caption=>"Name",          :data=>proc{|rec| rec.name},                        :title=>t(:dba_history_list_sql_detail_historic_bind_name, :default=>"Name of bind variable in statement") },
    {:caption=>"Typ",           :data=>proc{|rec| rec.datatype_string},             :title=>"data type of bind variable"},
    {:caption=>"Last captured", :data=>proc{|rec| localeDateTime(rec.last_captured)}, :title=>"time of last capture"},
    {:caption=>"Value",         :data=>proc{|rec| rec.value_string},                :title=>"Value of bind variable represented as string"},
    {:caption=>"Char.set",      :data=>proc{|rec| rec.character_set},               :title=>'Character set used for bind'},
    {:caption=>"Precision",     :data=>proc{|rec| fn rec.precision},                :title=>"Precision (for numeric binds)"},
    {:caption=>"Scale",         :data=>proc{|rec| fn rec.scale},                    :title=>"Scale (for numeric binds)"},
    {:caption=>"Max. length",   :data=>proc{|rec| fn rec.max_length},               :title=>"Maximum bind length"},
    {:caption=>"Samples",       :data=>proc{|rec| link_bind_samples(rec)},                  :title=>'Number of samples for this bind position in time period'},
]

 gen_slickgrid(@binds, column_options, {
        :caption => t(:dba_history_list_sql_detail_historic_binds_caption, :default=>'Last captured bind variables'),
        :max_height => 350,
        :width => :auto
}) %>

<br><b><%= t(:additional_infos, :default=>'Additional information') %></b><br><br>
<div class="float_left">
    <%= ajax_submit("Execution-Plan (#{@sql.plan_hash_value_count})", {
             :update_area          => @update_area,
             :action               => :list_sql_historic_execution_plan,
             :controller           => :dba_history,
             :instance             => @instance,
             :sql_id               => @sql_id,
             :parsing_schema_name  => @parsing_schema_name,
             :time_selection_start => @time_selection_start,
             :time_selection_end   => @time_selection_end
        }, :title => "Show execution plan(s) in given time period")
    %>
</div>
&nbsp;
<div class="float_left">
  <%= ajax_submit(t(:dba_history_list_sql_detail_historic_complete_timeline_caption, :default=>'Full history'), {
      :update_area => @update_area,
      :action      => :list_sql_history_snapshots,
      :controller  => :dba_history,
      :instance    => @instance,
      :dbid        => @dbid,
      :sql_id      => @sql_id,
      :groupby     => :day,
      :parsing_schema_name => @parsing_schema_name
  }, :title => t(:dba_history_list_sql_detail_historic_complete_timeline_hint, :default=>'List complete history of SQL in time'))
  %>
</div>

<div class="float_left">
    <%=
        groupfilter = {:DBID                   => @dbid,
                       :Idle_Wait1             => "PX Deq Credit: send blkd",
                       :Min_Snap_ID            => @sql.min_snap_id,
                       :Max_Snap_ID            => @sql.max_snap_id,
                       :time_selection_start   => @time_selection_start,
                       :time_selection_end     => @time_selection_end ,
                       "SQL-ID"                => @sql_id
        }

        groupfilter[:Instance] = @instance if @instance
        groupfilter['User'] = @parsing_schema_name if @parsing_schema_name


        ajax_submit("Active Session History", {
             :update_area => @update_area,
             :action      => :list_session_statistic_historic_grouping,
             :controller  => :active_session_history,
             :groupfilter => groupfilter,
             :groupby     => "SQL-ID"
        }, :title =>t(:list_session_statistic_historic_grouping_link_title, :default=>"Show wait states of SQL in Active Session History for given time period") )
  %>
</div>&nbsp;
&nbsp;
<div class="float_left">
    <%= ajax_submit(t(:dba_history_list_sql_detail_historic_current_sga_caption, :default=>'SQL in current SGA'), {
             :update_area    => @update_area,
             :controller     => :dba_sga,
             :action         => :list_sql_detail_sql_id,
             :instance       => @instance,
             :sql_id         => @sql_id
        }, :title => t(:dba_history_list_sql_detail_historic_current_sga_hint, :default=>'Show data of SQL from current SGA (if still exists in SGA)'))
    %>
</div>
<% if @instance && (get_current_database[:management_pack_license] == :diagnostics_and_tuning_pack || get_current_database[:management_pack_license] == :diagnostics_pack) %>
    &nbsp;
    <div class="float_left">
      <%= form_tag(url_for(:controller            => :dba_history,
                           :action                => :list_awr_sql_report_html,
                           :instance              => @instance,
                           :time_selection_start  => @time_selection_start,
                           :time_selection_end    => @time_selection_end,
                           :sql_id                => @sql_id,
                           browser_tab_id:        @browser_tab_id
                   ), {:method => 'post', :target=>'_blank'}) do %>
        <%= submit_tag('SQL report', :title =>t(:dba_history_list_sql_detail_historic_current_sga_hint, :default=>'Generate genuine Oracle SQL report by executing DBMS_WORKLOAD_REPOSITORY.AWR_SQL_REPORT_HTML')) %>
      <% end %>
    </div>
<% end %>
<% if get_db_version >= '11.2' %>
  <div class="float_left">
      <%=
        ajax_submit('SQL plan baseline', {
            :controller      => :dba_history,
            :action          => (@sql.plan_hash_value_count > 1 ? :select_plan_hash_value_for_baseline : :generate_baseline_creation),
            :update_area     => @update_area,
            :sql_id          => @sql_id,
            :plan_hash_value => @sql.last_plan_hash_value,
            :min_snap_id     => @sql.min_snap_id,
            :max_snap_id     => @sql.max_snap_id
        }, :disabled => (@sql.plan_hash_value_count < 1),
                    :title=> t(:dba_history_list_sql_detail_historic_create_baseline_hint, :default=>"Generate script to fix exactly this execution plan as SQL-baseline for this SQL."))

      %>
  </div>
<% end %>

<% if get_db_version >= '12.1' %>
    <div class="float_left">
      <%=
        ajax_submit('SQL-Translation', {
            :controller           => :dba_sga,
            :action               => :generate_sql_translation,
            :update_area          => @update_area,
            :sql_id               => @sql_id,
            :user_name            => @parsing_schema_name
        }, :title=> t(:dba_history_list_sql_detail_historic_create_translation_hint, :default=>"Generate script to create profile for SQL-translation-framework for this SQL."))
      %>
    </div>
<% end %>

<div id="<%= @update_area %>" style="clear:both; width:100%;">
</div>

<script type="application/javascript">
    // ensure no line break heppens due to vertical scrollbar
    jQuery("#<%= @table_id_prefix %>_sql").width(jQuery("#<%= @table_id_prefix %>_sql").width()+20);

  // set height of sql (left column) to height of right column
  jQuery("#<%= "#{@table_id_prefix}_sql" %>").height(jQuery("#<%= "#{@table_id_prefix}_right_single_table"%>").height() + jQuery("#<%= "#{@table_id_prefix}_right_table"%>").height());

  jQuery("#<%= "#{@table_id_prefix}_main" %>").resizable({
      handles: 's',
      resize: function( event, ui ) {
          jQuery("#<%= "#{@table_id_prefix}_sql" %>").height(jQuery("#<%= "#{@table_id_prefix}_main"%>").height()-30);
      },
      stop: function( event, ui ) {
          jQuery("#<%= "#{@table_id_prefix}_sql" %>").height(jQuery("#<%= "#{@table_id_prefix}_main"%>").height()-10);
      }
  });

</script>