<script type="text/javascript">

    function toggle_expand(a_id, rec_id, depth, grid_id){
        var anchor = $('#'+a_id);
        //alert(grid_id);
        var grid        = $('#'+grid_id).data('slickgrid');
        var data_view   = grid.getData();
        var grid_data    = data_view.getItems();
        var row = grid_data[rec_id];

        // Ermitteln der Anzahl führender Blanks als Maß für die Hierarchietiefe
        function blank_count(value){
            var i=0;
            while ((value[i] == ' ' || value[i] == '|') && i<value.length){
                i++;
            }
            return i;
        }

        function toggle_rows(start_rec_id, hide){
            var start_depth = blank_count(row['col0']);
            start_rec_id++;
            while (start_rec_id < grid_data.length && blank_count(grid_data[start_rec_id]['col0']) > start_depth){
                grid_data[start_rec_id]['hidden'] = hide;
                start_rec_id++;
            }

        }


        if (row['collapsed']){
            row['collapsed'] = false;
            anchor.removeClass('expand').addClass('collapse');
            toggle_rows(rec_id, false);
        } else {
            row['collapsed'] = true;
            anchor.removeClass('collapse').addClass('expand');
            toggle_rows(rec_id, true);
        }
        data_view.refresh();                                                    // Ausloesen der erneuten Verarbeitung der Filter-Funktion

    }

    function filter_collapsed_item_rows(item) {
        if (item['hidden'])
            return false;
        return true;
    }

</script>

<% @update_area = get_unique_area_id %>
<%= 'No execution plan found' if @multiplans.count == 0 %>
<% @multiplans.each do |mp|
     @plans = mp[:plans]
     @mp = mp
     @toggle_id_prefix = get_unique_area_id
     @grid_id          = get_unique_area_id                                     # DOM-ID des DIVs mit SlickGrid
     @indent_vector    = []                                                     # Array mit Hashes für jede Einrückung: :parent_id, :last_exists_id
%>


<%

   def avg_read_bytes(rec)
     fn(rec.read_io_bytes/rec.read_io_requests) if rec.read_io_bytes && rec.read_io_requests && rec.read_io_requests > 0
   end

   def avg_write_bytes(rec)
     fn(rec.write_io_bytes/rec.write_io_requests) if rec.write_io_bytes && rec.write_io_requests && rec.write_io_requests > 0
   end

   def field_style(rec)
     return 'background-color:coral;' if rec.version_red_count    < @multiplans.count
     return 'background-color:orange;' if rec.version_orange_count < @multiplans.count
   end

   def link_column_wait(rec, value)
     groupfilter =  {
             :DBID                   => get_dbid,
             'SQL-ID'                => @sql_id,
             'Plan-Hash-Value'       => @mp.plan_hash_value,
             'Plan-Line-ID'          => rec.id,
             :time_selection_start   => localeDateTime(@mp.first_occurrence, :minutes),
             :time_selection_end     => localeDateTime(@mp.last_occurrence, :minutes),
             :Min_Snap_ID            => @mp.min_snap_id,
             :Max_Snap_ID            => @mp.max_snap_id,
             :Idle_Wait1             => 'PX Deq Credit: send blkd'
     }
     groupfilter[:Instance] = @instance if @instance
     my_ajax_link_to(value,
                     url_for(:controller     => :active_session_history,
                             :action         => :list_session_statistic_historic_grouping,
                             :groupfilter    => groupfilter,
                             :groupby        => 'Event',
                             :update_area    => @update_area
                     ),
                     :title => 'Show wait events for operation in Active Session History'
     )
   end

   # Anzeige %-Wert wenn != 0
   def nn_pct(single, sum)
     retval = percentage(single, sum)
     retval == 0 ? nil : retval
   end

   def list_operation(rec)
     tab = ""
     toggle_id = "#{@toggle_id_prefix}_#{rec.id}"

     if rec.depth > @indent_vector.count                                        # Einrückung gegenüber Vorgänger
       last_exists_id = 0                                                       # ID des letzten Records, für den die selbe parent_id existiert
       @plans.each do |p|
         if p.id > rec.id &&  p.parent_id == rec.parent_id                      # nur Nachfolger des aktuellen testen, letzte Existenz des parent_id suchen
           last_exists_id = p.id
         end
       end
       @indent_vector << {:parent_id => rec.parent_id, :last_exists_id => last_exists_id}
     end

     while rec.depth < @indent_vector.count                                     # Einrückung gegenüber Vorgänger
       @indent_vector.delete_at(@indent_vector.count-1);
     end

     #rec.depth.downto(1) {
     #  tab << "<span class=\"toggle\"></span>&nbsp;"
     #}

     @indent_vector.each_index do |i|
       if i < @indent_vector.count-1                                            # den letzten Eintrag unterdrücken, wird relevant beim nächsten, wenn der einen weiter rechts eingerückt ist
         v = @indent_vector[i]
         tab << "<span class=\"toggle #{'vertical-line' if rec.id < v[:last_exists_id]}\" title=\"parent_id=#{v[:parent_id]} last_exists_id=#{v[:last_exists_id]}\">#{'' if rec.id < v[:last_exists_id]}</span>&nbsp;"
       end
     end


     if rec[:is_parent]                                                         # Über hash ansprechen, da in bestimmten Konstellationen der Wert nicht im hash enthalten ist => false
       if rec.id > 0                                                            # 1. und 2. Zeile haben gleiche Einrückung durch weglassen des letzten Eintrages von @indent_vector, hiermit bleibt 1. Zeile trotzde, weiter links
         tab << "<a class=\"toggle collapse\" id=\"#{toggle_id}\" onclick=\"toggle_expand('#{toggle_id}', #{rec.id}, #{rec.depth}, '#{@grid_id}');\"></a>"
       end
     else
       if @plans.count > rec.id+1 && @plans[rec.id+1].parent_id == rec.parent_id # Es gibt noch einen unmittelbaren Nachfolger mit selber Parent-ID
         tab << "<span class=\"toggle vertical-corner-line\"></span>"           # durchgehende Linie mit abzweig
       else
         tab << "<span class=\"toggle corner-line\"></span>"                    # Nur Linie mit Abzweig
       end
     end
     tab << "&nbsp;"
     "<span style=\"color: lightgray;\">#{tab}</span>#{rec.operation} #{rec.options}".html_safe
   end

   def get_formatted_other_xml(rec)
     return nil if rec.other_xml.nil?
      my_html_escape(rec.other_xml).gsub(/&lt;info/, "<br/>&lt;info").gsub(/&lt;hint/, "<br/>&lt;hint")
   end

   def get_formatted_other_xml_title(rec)
     return nil if rec.other_xml.nil?
      my_html_escape(rec.other_xml).gsub(/&lt;info/, "\n&lt;info").gsub(/&lt;hint/, "\n&lt;hint")
   end

  def parallel_text(rec)
    output = "#{rec.parallel_short}"
    output << "&nbsp;#{rec.max_pq_sessions}" if rec.max_pq_sessions && rec.max_pq_sessions > 0  if get_db_version >= "11.2"
    output
  end

   def parallel_title(rec)
     output = "%t:\n#{rec.other_tag}"
     output << "\n\nMaximum number of different active PQ slaves within one ASH sample = #{rec.max_pq_sessions}" if rec.max_pq_sessions && rec.max_pq_sessions > 0 if get_db_version >= "11.2"
     output
   end

   column_options =
    [
      {:caption=>'Operation',   :data=>proc{|rec| list_operation(rec)},         :no_wrap=>true, :title=>t(:dba_history_list_sql_detail_execution_plan_operation_hint, :default=>'Kind of access'), :data_title=>proc{|rec| "%t: #{rec.operation} #{rec.options}"}},
      {:caption=>'ID',          :data=>proc{|rec| rec.id },  :align=>:right,                    :title=>t(:dba_history_list_sql_detail_execution_plan_id_hint, :default=>'ID of operation'),             :data_title=>proc{|rec| "%t:\nParent_ID=#{rec.parent_id}"} },
      {:caption=>'R.',          :data=>proc{|rec| rec.execorder },  :align=>:right,             :title=>t(:dba_history_list_sql_detail_execution_plan_order_hint, :default=>'Execution order of operation'),    :data_title=>proc{|rec| "%t:\nID=#{rec.id}, Parent_ID=#{rec.parent_id}"} },
      {:caption=>'Object-name', :data=>proc{|rec| link_object_description(@update_area, rec.object_owner, rec.object_name) }, :title=>t(:dba_history_list_sql_detail_execution_plan_objectname_hint, :default=>'Name of object'), :data_title=>proc{|rec| "%t,\nType = #{rec.object_type},\nAlias = #{rec.object_alias},\nQuery block name = #{rec.qblock_name}"} },
      {:caption=>'Rows',        :data=>proc{|rec| fn(rec.num_rows) },                           :title=>"Number of rows of object (from analyze info)",     :align=>:right, :data_title=>proc{|rec| "%t, Last_Analyzed=#{localeDateTime(rec.last_analyzed)}"} },
      {:caption=>'MB',          :data=>proc{|rec| fn(rec.mbytes) },                             :title=>"Size of object in MBytes",     :align=>:right },
      {:caption=>'Cost',        :data=>proc{|rec| fn(rec.cost) },                               :title=>"Costs calculated by optimizer + additional optimizer calculations", :align=>:right, :data_title=>proc{|rec| "%t\nCPU cost = #{fn rec.cpu_cost}\nIO cost = #{fn rec.io_cost}\nestimated bytes = #{fn rec.bytes}\nestimated time (secs.) = #{fn rec.time}\nPartition_Start = #{rec.partition_start}\nPartition_Stop = #{rec.partition_stop}\nPartition_ID = #{rec.partition_id}"} },
      {:caption=>'Card.',       :data=>proc{|rec| fn(rec.cardinality) },                        :title=>'Estimated number of rows produced by the operation', :align=>:right, :data_title=>proc{|rec| "%t\nCPU cost = #{fn rec.cpu_cost}\nIO cost = #{fn rec.io_cost}\nestimated bytes = #{fn rec.bytes}\nestimated time (secs.) = #{fn rec.time}\nPartition_Start = #{rec.partition_start}\nPartition_Stop = #{rec.partition_stop}\nPartition_ID = #{rec.partition_id}"} },
      {:caption=>'Parallel',    :data=>proc{|rec| parallel_text(rec)},                          :title=>"Parallelization (from Other_Tag)", :data_title=>proc{|rec| parallel_title(rec)} },
      {:caption=>'A.',          :data=>proc{|rec| expand_compare_spaces(rec.access_predicates) }, :title=>t(:dba_history_list_sql_detail_execution_access_hint, :default=>'Access criteria on object'), :max_wrap_width=>300, :style=>"word-wrap: break-word;", :data_title=>proc{|rec| "%t\nNumber of columns with matching predicates = #{rec.search_columns}"} },
      {:caption=>'F.',          :data=>proc{|rec| expand_compare_spaces(rec.filter_predicates) }, :title=>t(:dba_history_list_sql_detail_execution_filter_hint, :default=>'Filter criteria on object'),  :max_wrap_width=>300, :style=>"word-wrap: break-word;" },
      {:caption=>'P.',          :data=>proc{|rec| html_escape expand_compare_spaces(rec.projection) }, :title=>"Projection: table- and index-columns gotten by this operation", :max_wrap_width=>80, :style=>"word-wrap: break-word;"},
      {:caption=>'Temp est.',   :data=>proc{|rec| fn(rec.temp_space_mb) },                      :title=>"Temp-space in MB estimated by optimizer during parse", :align=>:right },
    ]
  column_options << {:caption=>'Temp max.',   :data=>proc{|rec| fn(rec.max_temp_ash_mb) },                      :title=>'Maximum amount of Temp-space in MB allocated by one session (incl. PQ-server) during execution of this plan line', :align=>:right }  if get_db_version >= '11.2'
  column_options << {:caption=>'DB time',     :data=>proc{|rec| fn(nn_pct(rec.db_time_seconds, @sum_db_time_seconds), 1) }, :align=>:right, :data_title=>proc{|rec| "DB-time: #{fn(rec.db_time_seconds)} seconds" }, :title=>"Percentage of total DB-time in % (from active session history / DBA_Hist_Active_Sess_History)", :show_pct_background=>true } if get_db_version >= "11.2"
  column_options << {:caption=>'CPU',         :data=>proc{|rec| link_column_wait(rec, fn(nn_pct(rec.cpu_seconds, @sum_cpu_seconds), 1))  },        :align=>:right, :data_title=>proc{|rec| "CPU: #{fn(rec.cpu_seconds)} seconds" }, :title=>"Percentage of CPU usage in % (from active session history / DBA_Hist_Active_Sess_History). Part of DB-time.", :show_pct_background=>true } if get_db_version >= "11.2"
  column_options << {:caption=>'Waits',       :data=>proc{|rec| link_column_wait(rec, fn(nn_pct(rec.waiting_seconds, @sum_waiting_seconds), 1))  },:align=>:right, :data_title=>proc{|rec| "Waiting: #{fn(rec.waiting_seconds)} seconds" }, :title=>"Percentage of wait events % (from active session history / DBA_Hist_Active_Sess_History). Part of DB-time.", :show_pct_background=>true } if get_db_version >= "11.2"
  column_options << {:caption=>'I/O',         :data=>proc{|rec| fn(nn_pct(rec.io_requests, @sum_io_requests), 1)},          :align=>:right, :data_title=>proc{|rec| "IO-Requests: #{fn(rec.read_io_requests)} reads, #{fn(rec.write_io_requests)} writes, avg.read=#{avg_read_bytes(rec)} bytes, avg.write=#{avg_write_bytes(rec)} bytes"}, :title=>"Percentage of  I/O-Requests in % (from active session history / DBA_Hist_Active_Sess_History)", :show_pct_background=>true } if get_db_version >= "11.2"
  column_options << {:caption=>'IC',          :data=>proc{|rec| fn(nn_pct(rec.interconnect_io_bytes, @sum_interconnect_io_bytes), 1)}, :align=>:right, :data_title=>proc{|rec| "Interconnect IO (kBytes): #{fn(rec.interconnect_io_bytes ? rec.interconnect_io_bytes/1024 : nil)}" }, :title=>"Percentage of  Interconnect-I/O in % (from active session history / DBA_Hist_Active_Sess_History)", :show_pct_background=>true } if get_db_version >= "11.2"
  column_options << {:caption=>'Dist',        :data=>proc{|rec| rec.distribution },                           :title=>"PQ-distribution-strategy" }
  column_options << {:caption=>'PGA max.',    :data=>proc{|rec| fn(rec.max_pga_ash_mb) },                     :title=>'Maximum amount of PGA in MB allocated by one session (incl. PQ-server) during execution of this plan line', :align=>:right }  if get_db_version >= '11.2'
  column_options << {:caption=>"Other XML",   :data=>proc{|rec| get_formatted_other_xml(rec) }, :title=>"Provides extra information specific to an execution step of the execution plan. The content of this column is structured using XML since multiple pieces of information can be stored there.", :max_wrap_width=>80, :data_title=>proc{|rec| get_formatted_other_xml_title(rec)} } if get_db_version >= "11.2"

  column_options.each do |c|
    c[:data_style] = proc{|rec| field_style(rec) }  # Einzelrecords der Ausfuehrungspläne nicht identisch
  end

  if get_db_version >= '11.2'
    @sum_io_requests = 0
    @sum_interconnect_io_bytes = 0
    @sum_cpu_seconds = 0                             # Anzahl der Samples
    @sum_waiting_seconds = 0                         # Anzahl der Samples
    @sum_db_time_seconds = 0
    @min_sample_time     = nil
    @plans.each do |p|
      @sum_io_requests           += p.io_requests             if p.io_requests
      @sum_interconnect_io_bytes += p.interconnect_io_bytes   if p.interconnect_io_bytes
      @sum_cpu_seconds           += p.cpu_seconds             if p.cpu_seconds
      @sum_waiting_seconds       += p.waiting_seconds         if p.waiting_seconds
      @sum_db_time_seconds       += p.db_time_seconds         if p.db_time_seconds
      @min_sample_time           =  p.min_sample_time         if @min_sample_time.nil? || p.min_sample_time && p.min_sample_time < @min_sample_time  # Kleinste Aufzeichnung eines Samples
    end
  end

  @caption =  "Explain Plan: last parse time #{localeDateTime(mp[:timestamp])}, Plan_Hash_Value=#{@mp.plan_hash_value}, Optimizer-Mode=#{@plans[0] ? @plans[0].optimizer : "[Unknown]"}, Optimizer_Env_Hash_Value=#{@mp.optimizer_env_hash_value}"
  if @multiplans.length > 1
    @caption << "<br/>Valid from #{localeDateTime(@mp.first_occurrence)} bis #{localeDateTime(@mp.last_occurrence)}<br/>"
    @caption << "#{@mp.executions} executions, #{formattedNumber(@mp.secs_per_execution,6)} seconds elapsed / execution"
  end
%>

    <%= gen_slickgrid(@plans, column_options, {
            :caption            => @caption.html_safe,
            :width              => :auto,
            :line_height_single => true,
            :data_filter        => 'filter_collapsed_item_rows',
            :grid_id            => @grid_id,
            :max_height         => "jQuery(window).height()*0.9"  # Max. 90 % of browsers client height
    }) %>


<% end %>

<div id="<%= @update_area %>" style="clear:both; width:100%; "></div>

