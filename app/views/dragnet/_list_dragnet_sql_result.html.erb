<%  # Die folgende Logik liegt hier, da sonst nicht auf ActionView-Helper zurückgegriffen werden kann
if @res.count > 0
    @column_options = []

      @res[0].each do |key, value|   # Iteration über Spalten der ersten Zeile
        @column_options << {:caption=>key,
                           :title=>key,
                           #:data_title=>proc{|rec| "#{key}: Classname=#{rec[key].class.name}"}
        }
      end

      # Ermitteln der anzahl Nachkommastellen einer Zahl
      def scale_count(number)
        number = number.to_s
        index = number.index "."
        return 0 unless index
        return number.length-index-1
      end

      #Iterieren über Spalten des Results
      chart_x_axis_found = false
      @column_options.each do |col|
        isNumber = true
        isDate   = true
        scale    = 0                            # Anzahl Nachkommastellen
        @res.each do |r|                         # Iteration über Zeilen des Results
          fieldval = r[col[:caption]]              # Aktueller Feldinhalt

          if isNumber && fieldval.class.name!="Fixnum" && fieldval.class.name!="BigDecimal" && fieldval.class.name!="NilClass"    # Prüfen auf alle Werte der Spalte numerisch
            isNumber = false;
          else
            if fieldval.class.name =="BigDecimal" && scale_count(fieldval) > scale
              scale = scale_count(fieldval)
            end
          end

          if isDate && fieldval.class.name!="Time" && fieldval.class.name!="NilClass" # Prüfen auf alle Werte Zeitstempel
            isDate = false
          end
        end

        case
          when isNumber then
            col[:data] = proc{|rec| formattedNumber(rec[col[:caption]], scale)}
            col[:align] = "right"
          when isDate then
            col[:data] = proc{|rec| localeDateTime(rec[col[:caption]])}
            unless chart_x_axis_found
              col[:plot_master_time] = true
              chart_x_axis_found = true
            end
          when col[:caption].downcase == 'sql_id' || col[:caption].downcase == "sql-id" || col[:caption].downcase["sql_id"] || col[:caption].downcase["sql-id"] then

            col[:data] = proc{|rec|
                                inst_id = nil
                                inst_id = rec["inst_id"]            if rec["inst_id"]
                                inst_id = rec["instance_number"]    if rec["instance_number"]
                                inst_id = rec["Instance"]           if rec["Instance"]
                                #inst_id = current_instance_number   if inst_id.nil? # Default wenn nicht anders belegt  ### Inst_ID auch Null zulassen jetzt

                                time_selection_start = localeDateTime(Time.new - (24*60*60*8), :minutes)                                # Default-Start 8 Tage rückwärts
                                time_selection_start = localeDateTime(rec['first_occurrence'], :minutes) if rec['first_occurrence']     # Überschrieben mit Wert aus Record wenn belegt
                                time_selection_start = localeDateTime(rec['first occurrence'], :minutes) if rec['first occurrence']     # Überschrieben mit Wert aus Record wenn belegt
                                time_selection_start = localeDateTime(rec['First Occurrence'], :minutes) if rec['First Occurrence']     # Überschrieben mit Wert aus Record wenn belegt

                                time_selection_end   = localeDateTime(Time.new, :minutes)                                               # Default-Ende jetzt
                                time_selection_end   = localeDateTime(rec['last_occurrence'], :minutes) if rec['last_occurrence']       # Überschrieben mit Wert aus Record wenn belegt
                                time_selection_end   = localeDateTime(rec['last occurrence'], :minutes) if rec['last occurrence']       # Überschrieben mit Wert aus Record wenn belegt
                                time_selection_end   = localeDateTime(rec['Last Occurrence'], :minutes) if rec['Last Occurrence']       # Überschrieben mit Wert aus Record wenn belegt

                                #link_sql_id('exec_dragnet_sql_detail_area', inst_id, my_html_escape(rec[col[:caption]]))
                                link_historic_sql_id(inst_id,
                                                     my_html_escape(rec[col[:caption]]) ,
                                                     time_selection_start,
                                                     time_selection_end,
                                                     :exec_dragnet_sql_detail_area
                                )

                             }
          when col[:caption].downcase == 'table_name' ||
                  col[:caption].downcase == "table name" ||
                  col[:caption].downcase == "object_name"
          then
            col[:data] = proc{|rec|
                                owner = nil                                     # Default
                                owner = rec["table_owner"]          if rec["table_owner"]   && !owner
                                owner = rec["Table owner"]          if rec["Table owner"]   && !owner
                                owner = rec["object_owner"]         if rec["object_owner"]  && !owner
                                owner = rec["owner"]                if rec["owner"]         && !owner
                                owner = rec["Owner"]                if rec["Owner"]         && !owner
                                if owner
                                  link_object_description(:exec_dragnet_sql_detail_area, owner, my_html_escape(rec[col[:caption]]), my_html_escape(rec[col[:caption]]))
                                else
                                  my_html_escape(rec[col[:caption]])            # Ohne Link
                                end
                             }
        else
          col[:data] = proc{|rec| my_html_escape(rec[col[:caption]]) }
        end
      end

%>

<%= gen_slickgrid(@res, @column_options, {:caption => @caption, :plot_area_id => "exec_dragnet_sql_detail_area", :max_height=>450}) %>

<div id='exec_dragnet_sql_detail_area'  style="padding-top: 5px;"></div>

<%
else
%>
<%= t(:dragnet_list_dragnet_sql_result_no_result, :default=>'No result for SQL') %>
<%
end
%>



